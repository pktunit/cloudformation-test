AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Test Template: Creates an AutoScalingGroup with a Load Balancer
  **WARNING** This template creates an Amazon EC2 instance.
  You will be billed for the AWS resources used if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Can contain only ASCII characters.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t4g.nano
    AllowedValues:
      - t4g.nano
      - t4g.micro
    ConstraintDescription: must be a valid EC2 instance type.
  Region:
    Description: Region to use
    Type: String
    Default: us-west-2
    AllowedValues:
      - us-east-1 
      - us-east-2
      - us-west-1 
      - us-west-2
    ConstraintDescription: Must be valid AWS Region.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  AWSInstanceType2Arch:
    t4g.nano:
      Arch: HVM64
    t4g.micro:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-west-2:
      HVM64: ami-0deb314c20acdd478
Resources:
# Setup VPC
  CloudFormationVPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: 10.0.8.0/22
# Setup Public and Private for us-west-2a
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: !Sub '${Region}a'
      CidrBlock: 10.0.8.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref CloudFormationVPC
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: !Sub '${Region}a'
      CidrBlock: 10.0.9.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref CloudFormationVPC
# Setup Public and Private for us-west-2b
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: !Sub '${Region}b'
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref CloudFormationVPC
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: !Sub '${Region}b'
      CidrBlock: 10.0.10.0/24
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref CloudFormationVPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CloudFormationVPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref CloudFormationVPC
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref CloudFormationVPC
  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
# Make Private Subnets Public for UserData setup.
  TemporaryRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PrivateSubnetA
  TemporaryRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PrivateSubnetB
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref CloudFormationVPC
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from LoadBalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      VpcId: !Ref CloudFormationVPC
  InstanceLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        ImageId: ami-0ff60e1968ccfe3d9
        InstanceType: t4g.nano
        KeyName: !Ref: KeyName
        SecurityGroupIds: 
          - !GetAtt WebServerSecurityGroup.GroupId
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              echo "Hello World from $(hostname -f)" > /var/www/html/index.html
  LoadBalancer: 
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties: 
      Name: !Sub '${AWS::StackName}-loadbalancer'
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties: 
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref CloudFormationVPC
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties: 
      LaunchTemplate: 
        LaunchTemplateId: !Ref InstanceLaunchTemplate
        Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs: 
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
Outputs:
  WebsiteURL:
    Description: URL for newly created LoadBalancer
    Value: !Sub
      - 'http://${PublicDNS}/'
      - PublicDNS: !GetAtt LoadBalancer.DNSName 
